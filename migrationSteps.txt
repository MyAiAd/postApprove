# PostApprove Migration Steps - Complete Deployment Guide

## Phase 1: GitHub Repository Setup

### DUPLICATION OPTIONS:
**Option A: Fork Existing AdApprove Repo** (if you have one)
- Fork your existing adApprove repository on GitHub
- Rename it to "postApprove" in settings
- Clone the forked repo locally

**Option B: Fresh Repository** (Recommended for clean start)
- Create completely new repository named "postApprove"
- Do NOT initialize with README (you already have one)

1. **Create New GitHub Repository**
   - Go to GitHub and create a new repository named "postApprove"
   - Do NOT initialize with README (you already have one)

2. **Prepare Local Repository**
   - Remove node_modules before committing: `rm -rf node_modules`
   - RECOMMENDATION: Do NOT upload node_modules to GitHub. They contain thousands of files and will be regenerated on deployment
   - Delete package-lock.json: `rm package-lock.json` (will be regenerated)
   - Create .gitignore file with:
     ```
     node_modules/
     .next/
     .env.local
     .env
     .DS_Store
     *.log
     ```

3. **Initial Git Setup**
   - `git add .`
   - `git commit -m "Initial commit - PostApprove social media post approval system"`
   - `git remote add origin https://github.com/yourusername/postApprove.git`
   - `git branch -M main`
   - `git push -u origin main`

## Phase 2: Supabase Project Setup

### NOTE: Supabase has NO "duplicate project" feature - must create new project

4. **Create New Supabase Project**
   - Go to https://supabase.com/dashboard
   - Click "New Project"
   - Name: "postapprove" or "PostApprove"
   - Choose region closest to your users
   - Generate a strong password for the database

5. **Database Schema Setup (RECOMMENDED: Use Idempotent Script)**
   - In Supabase dashboard, go to SQL Editor
   - BEST OPTION: Copy/paste entire contents of `supabase-schema-idempotent.sql` and run it
     * This script is safe to run multiple times
     * Automatically handles images â†’ posts table migration
     * Creates all indexes, policies, and storage setup
     * Provides detailed logging of what it creates
   - ALTERNATIVE: Run `supabase-schema.sql` manually (then `supabase-update-schema.sql`)
   - Verify tables are created: campaigns, posts (migrated from images)

6. **Storage Bucket Setup**
   - If you used the idempotent script, this is ALREADY DONE!
   - Otherwise: Go to Storage in Supabase dashboard
     * Create new bucket named "posts" (instead of "images")
     * Set bucket to public
     * Add RLS policies as documented in README.md

7. **Get Supabase Credentials**
   - Go to Settings > API
   - Copy Project URL and anon public key
   - Save these for environment variables

## Phase 3: Resend Email Service Setup
8. **Setup Resend Account**
   - Sign up at https://resend.com (or use existing account)
   - Create a new API key for this project
   - Verify domain: msgs.myai.ad (or setup new domain)

## Phase 4: Vercel Deployment Setup

### NOTE: Vercel has NO "duplicate project" feature - but import is easy

9. **Connect Repository to Vercel**
   - Go to https://vercel.com/dashboard
   - Click "New Project"
   - Import your GitHub repository "postApprove"
   - Framework Preset: Next.js (should auto-detect)
   - **TIP**: If you have existing adApprove on Vercel, you can copy environment variables from its settings

10. **Environment Variables in Vercel**
    - In Vercel project settings > Environment Variables, add:
    ```
    NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
    NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
    RESEND_API_KEY=your_resend_api_key
    ADMIN_EMAIL=Jenny@MyAi.ad
    NEXT_PUBLIC_APP_URL=https://your-app-name.vercel.app
    ```

11. **Deploy**
    - Vercel will auto-deploy on git push
    - First deployment will install dependencies automatically
    - Check deployment logs for any errors

## Phase 5: Domain & DNS (Optional)
12. **Custom Domain Setup**
    - In Vercel project settings > Domains
    - Add your custom domain if desired
    - Update NEXT_PUBLIC_APP_URL environment variable accordingly

## Phase 6: Code Adaptations for Social Media Posts
13. **CRITICAL: Database Schema Changes Required**
    - The database table 'images' needs to be renamed to 'posts'
    - Update supabase-schema.sql to use 'posts' table instead of 'images'
    - This affects multiple files that reference the 'images' table

14. **Code Changes Required (Major Refactor)**
    - app/api/send-notification/route.ts: Change .from('images') to .from('posts')
    - app/approve/[campaignId]/page.tsx: Update all 'images' references to 'posts'
    - app/page.tsx: Update all 'images' references to 'posts' 
    - lib/supabase.ts: Rename Image interface to Post
    - Update all variable names: images -> posts, image -> post, etc.
    - Update UI text: "images" -> "posts", "image" -> "post"
    - CSS classes: .image-grid -> .post-grid, .image-card -> .post-card

15. **Storage Bucket Updates**
    - Update all hardcoded 'images' bucket references to 'posts'
    - Update file path handling for posts vs images
    - Ensure next.config.js supports post file formats

## Phase 7: Post-Refactor Testing & Validation
15. **Local Testing First**
    - Create local .env.local with production credentials
    - Run `npm install` to reinstall dependencies
    - Run `npm run dev` to test locally
    - Test upload flow
    - Test approval flow
    - Test email notifications

16. **Production Testing**
    - Test complete workflow on live site
    - Upload a test campaign
    - Verify approval page works
    - Confirm email notifications are sent
    - Check all links and redirects

## Phase 8: Additional Considerations
17. **Security Review**
    - Verify RLS policies in Supabase are correct
    - Check that only necessary permissions are granted
    - Test file upload security (file type restrictions, size limits)

18. **Performance Optimization**
    - Check image/post optimization settings in next.config.js
    - Verify caching policies
    - Test loading speeds

19. **Monitoring Setup**
    - Setup error monitoring (Vercel provides basic monitoring)
    - Configure alerts for critical failures
    - Monitor email delivery rates in Resend dashboard

## Quick Command Reference
```bash
# Clean and prepare for GitHub
rm -rf node_modules package-lock.json
git add .
git commit -m "Clean repository for deployment"
git push

# Local development setup
npm install
npm run dev

# Build test
npm run build
```

## Troubleshooting Common Issues
- **Build failures**: Check TypeScript errors, run `npm run lint`
- **Database connection issues**: Verify Supabase URL and key
- **Email not sending**: Check Resend API key and domain verification
- **File upload issues**: Verify storage bucket permissions and RLS policies
- **Environment variables**: Ensure all required variables are set in Vercel

## Post-Launch Tasks
- Monitor error logs in Vercel dashboard
- Check email delivery reports in Resend
- Monitor database usage in Supabase
- Setup regular backups if needed
- Plan for scaling if usage grows

This migration should result in a fully functional PostApprove application deployed and ready for use!
